@page "/"
@using MudBlazor
@using ThreeBodySimulation.Data
@using ThreeBodySimulation.Blazor.Components
@using ThreeBodySimulation.Blazor.Core
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="12" lg="6">
        <BodyPrompt @bind-Body="simulationParams.Body1" Title="Body 1" />
    </MudItem>
    <MudItem xs="12" lg="6">
        <BodyPrompt @bind-Body="simulationParams.Body2" Title="Body 2" />
    </MudItem>
    <MudItem xs="12" lg="6">
        <BodyPrompt @bind-Body="simulationParams.Body3" Title="Body 3" />
    </MudItem>
    <MudItem xs="12" lg="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5">Simulation</MudText>
                <MudSelect T="SolverType" Label="Solver" @bind-Value="simulationParams.Solver">
                    @foreach (SolverType solverType in Enum.GetValues(typeof(SolverType)))
                    {
                        <MudSelectItem T="SolverType" Value="@solverType">
                            @solverType.ToHumanReadableString()
                        </MudSelectItem>
                    }
                </MudSelect>
                <MudNumericField T="double" Label="Gravitational Constant"
                @bind-Value="simulationParams.G" Min="1e-12" />
                <MudNumericField T="double" Label="Step Size" 
                @bind-Value="simulationParams.StepSize" Min="1e-12" />
                <MudNumericField T="double" Label="Simulation Time"
                @bind-Value="simulationParams.SimulationTime" Min="0.1" />
            </MudCardContent>
            <MudCardActions>
                <MudStack Spacing="1" Row="true">
                    @if (isLoadingSimulation)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error"
                        StartIcon="@Icons.Material.Filled.StopCircle"
                        OnClick="CancelSimulation">
                            Cancel
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.PlayCircle"
                        OnClick="LoadSimulation">
                            Simulate
                        </MudButton>
                    }
                    <MudButton Variant="Variant.Filled"
                    StartIcon="@Icons.Material.Filled.FileOpen"
                    Color="Color.Surface" OnClick="LoadSimulation">
                        JSON
                    </MudButton>
                </MudStack>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@if (isLoadingSimulation)
{
    <MudProgressLinear Color="Color.Info" Buffer="false" Class="my-7"
    Min="0" Max="100"
    Value="@(loadedSimulationTime / @simulationParams.SimulationTime * 100.0)"  />
}

<div id="plot"></div>

@code {
    private CancellationTokenSource _cancellationTokenSource = null!;

    private bool isLoadingSimulation { get; set; } = false;
    private double loadedSimulationTime { get; set; } = 0.0;
    private SimulationParams simulationParams { get; set; } = new();

    private async Task LoadSimulation()
    {
        isLoadingSimulation = true;
        Progress<double> progress = new();
        progress.ProgressChanged += OnProgressChanged;

        Simulator simulator = new(simulationParams);
        _cancellationTokenSource = new();
        loadedSimulationTime = 0;

        await simulator.RunAsync(progress, _cancellationTokenSource.Token);

        //await JS.InvokeVoidAsync("renderThreeBodyAnimation3D", simulationParams.Body1.Mass,);
        isLoadingSimulation = false;

        progress.ProgressChanged -= OnProgressChanged;
        _cancellationTokenSource.Dispose();
    }

    private async Task CancelSimulation()
    {
        await _cancellationTokenSource.CancelAsync();
    }

    private void OnProgressChanged(object? sender, double newProgress)
    {
        loadedSimulationTime = newProgress;
        StateHasChanged();
    }
}