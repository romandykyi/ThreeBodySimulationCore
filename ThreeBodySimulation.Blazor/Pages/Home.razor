@page "/"
@using MudBlazor
@using ThreeBodySimulation.Blazor.Components
@using ThreeBodySimulation.Blazor.Core
@using ThreeBodySimulation.Blazor.Core.Extensions
@using ThreeBodySimulation.Data
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="12" lg="6">
        <BodyPrompt @bind-Body="simulationParams.Body1" Disabled="@isLoadingSimulation" Title="Body 1" />
    </MudItem>
    <MudItem xs="12" lg="6">
        <BodyPrompt @bind-Body="simulationParams.Body2" Disabled="@isLoadingSimulation" Title="Body 2" />
    </MudItem>
    <MudItem xs="12" lg="6">
        <BodyPrompt @bind-Body="simulationParams.Body3" Disabled="@isLoadingSimulation" Title="Body 3" />
    </MudItem>
    <MudItem xs="12" lg="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5">Simulation</MudText>
                <MudSelect T="SolverType" Label="Solver" @bind-Value="simulationParams.Solver"
                Disabled="@isLoadingSimulation">
                    @foreach (SolverType solverType in Enum.GetValues(typeof(SolverType)))
                    {
                        <MudSelectItem T="SolverType" Value="@solverType">
                            @solverType.ToHumanReadableString()
                        </MudSelectItem>
                    }
                </MudSelect>
                <MudNumericField T="double" Label="Gravitational Constant"
                Disabled="@isLoadingSimulation" 
                @bind-Value="simulationParams.G" Min="1e-12" />
                <MudNumericField T="double" Label="Step Size"
                Disabled="@isLoadingSimulation"
                @bind-Value="simulationParams.StepSize" Min="1e-6" />
                <MudNumericField T="double" Label="Simulation Time"
                Disabled="@isLoadingSimulation"
                @bind-Value="simulationParams.SimulationTime" Min="0.1" />
            </MudCardContent>
            <MudCardActions>
                <MudStack Spacing="1" Row="true">
                    @if (isLoadingSimulation)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error"
                        StartIcon="@Icons.Material.Filled.StopCircle"
                        OnClick="CancelSimulation">
                            Cancel
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                        StartIcon="@Icons.Material.Filled.PlayCircle"
                        OnClick="LoadSimulation">
                            Simulate
                        </MudButton>
                    }
                    <MudButton Variant="Variant.Filled"
                    StartIcon="@Icons.Material.Filled.FileOpen"
                    Color="Color.Surface" OnClick="OnJsonButtonClicked">
                        JSON
                    </MudButton>
                </MudStack>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <div id="@plotId" style="width:98%;height:600px;"></div>
    </MudItem>
</MudGrid>

<JsonOverlay @bind-Params="simulationParams" @bind-Visible="jsonOverlayVisible" />

@if (isLoadingSimulation)
{
    <div class="overlay" />
}

@code {

    private const string plotId = "three-body-plot";

    private CancellationTokenSource _cancellationTokenSource = null!;

    private bool jsonOverlayVisible { get; set; } = false;

    private bool isLoadingSimulation { get; set; } = false;
    private SimulationParams simulationParams { get; set; } = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    private async Task LoadSimulation()
    {
        isLoadingSimulation = true;

        Simulator simulator = new(simulationParams);
        _cancellationTokenSource = new();

        var simResult = await simulator.RunAsync(_cancellationTokenSource.Token);

        if (!_cancellationTokenSource.IsCancellationRequested)
        {
            await JS.InvokeVoidAsync(
                "renderThreeBodyAnimation3D",
                _cancellationTokenSource.Token,
                plotId,
                simResult);
        }
        isLoadingSimulation = false;

        await JS.InvokeVoidAsync("scrollToElementId", plotId);

        _cancellationTokenSource.Dispose();
    }

    private async Task CancelSimulation()
    {
        await _cancellationTokenSource.CancelAsync();
    }

    private Task OnJsonButtonClicked()
    {
        jsonOverlayVisible = true;
        return Task.CompletedTask;
    }
}